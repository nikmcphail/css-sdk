#pragma once

#include "base_player.h"

class cs_player_t : public base_player_t {
public:
  NETVAR(anim_time, float, "CCSPlayer", "m_flAnimTime");
  NETVAR(simulation_time, float, "CCSPlayer", "m_flSimulationTime");
  NETVAR(origin, vector3_t, "CCSPlayer", "m_vecOrigin");
  NETVAR(rotation, vector3_t, "CCSPlayer", "m_angRotation");
  NETVAR(model_index, int, "CCSPlayer", "m_nModelIndex");
  NETVAR(effects, int, "CCSPlayer", "m_fEffects");
  NETVAR(team_num, int, "CCSPlayer", "m_iTeamNum");
  NETVAR(collision_group, int, "CCSPlayer", "m_CollisionGroup");
  NETVAR(elasticity, float, "CCSPlayer", "m_flElasticity");
  NETVAR(owner_entity, ehandle, "CCSPlayer", "m_hOwnerEntity");
  NETVAR(collision, void*, "CCSPlayer", "m_Collision");
  NETVAR(texture_frame_index, int, "CCSPlayer", "m_iTextureFrameIndex");
  NETVAR(predictable_id, int, "CCSPlayer", "m_PredictableID");
  NETVAR(is_player_simulated, bool, "CCSPlayer", "m_bIsPlayerSimulated");
  NETVAR(sequence, int, "CCSPlayer", "m_nSequence");
  NETVAR(force_bone, int, "CCSPlayer", "m_nForceBone");
  NETVAR(force, vector3_t, "CCSPlayer", "m_vecForce");
  NETVAR(skin, int, "CCSPlayer", "m_nSkin");
  NETVAR(body, int, "CCSPlayer", "m_nBody");
  NETVAR(hitbox_set, int, "CCSPlayer", "m_nHitboxSet");
  NETVAR(model_scale, float, "CCSPlayer", "m_flModelScale");
  NETVAR(pose_parameter, float, "CCSPlayer", "m_flPoseParameter");
  NETVAR(playback_rate, float, "CCSPlayer", "m_flPlaybackRate");
  NETVAR(encoded_controller, float, "CCSPlayer", "m_flEncodedController");
  NETVAR(client_side_animation, bool, "CCSPlayer", "m_bClientSideAnimation");
  NETVAR(client_side_frame_reset, bool, "CCSPlayer", "m_bClientSideFrameReset");
  NETVAR(new_sequence_parity, int, "CCSPlayer", "m_nNewSequenceParity");
  NETVAR(reset_events_parity, int, "CCSPlayer", "m_nResetEventsParity");
  NETVAR(lighting_origin, ehandle, "CCSPlayer", "m_hLightingOrigin");
  NETVAR(cycle, float, "CCSPlayer", "m_flCycle");
  NETVAR(fade_min_dist, float, "CCSPlayer", "m_fadeMinDist");
  NETVAR(fade_max_dist, float, "CCSPlayer", "m_fadeMaxDist");
  NETVAR(fade_scale, float, "CCSPlayer", "m_flFadeScale");
  NETVAR(flex_weight, float, "CCSPlayer", "m_flexWeight");
  NETVAR(view_target, vector3_t, "CCSPlayer", "m_viewtarget");
  NETVAR(next_attack, float, "CCSPlayer", "m_flNextAttack");
  NETVAR(active_weapon, ehandle, "CCSPlayer", "m_hActiveWeapon");
  NETVAR(my_weapons, void*, "CCSPlayer", "m_hMyWeapons");
  NETVAR(local, void*, "CCSPlayer", "m_Local");
  NETVAR(view_offset, vector3_t, "CCSPlayer", "m_vecViewOffset[0]");
  NETVAR(friction, float, "CCSPlayer", "m_flFriction");
  NETVAR(ammo, int, "CCSPlayer", "m_iAmmo");
  NETVAR(on_target, int, "CCSPlayer", "m_fOnTarget");
  NETVAR(tick_base, int, "CCSPlayer", "m_nTickBase");
  NETVAR(last_weapon, ehandle, "CCSPlayer", "m_hLastWeapon");
  NETVAR(ground_entity, ehandle, "CCSPlayer", "m_hGroundEntity");
  NETVAR(velocity, vector3_t, "CCSPlayer", "m_vecVelocity[0]");
  NETVAR(base_velocity, vector3_t, "CCSPlayer", "m_vecBaseVelocity");
  NETVAR(death_time, float, "CCSPlayer", "m_flDeathTime");
  NETVAR(water_level, int, "CCSPlayer", "m_nWaterLevel");
  NETVAR(lagged_movement_value, float, "CCSPlayer", "m_flLaggedMovementValue");
  NETVAR(deadflag, int, "CCSPlayer", "deadflag");
  NETVAR(fov, int, "CCSPlayer", "m_iFOV");
  NETVAR(fov_start, int, "CCSPlayer", "m_iFOVStart");
  NETVAR(fov_time, float, "CCSPlayer", "m_flFOVTime");
  NETVAR(default_fov, int, "CCSPlayer", "m_iDefaultFOV");
  NETVAR(zoom_owner, ehandle, "CCSPlayer", "m_hZoomOwner");
  NETVAR(vehicle, ehandle, "CCSPlayer", "m_hVehicle");
  NETVAR(use_entity, ehandle, "CCSPlayer", "m_hUseEntity");
  NETVAR(health, int, "CCSPlayer", "m_iHealth");
  NETVAR(life_state, char, "CCSPlayer", "m_lifeState");
  NETVAR(max_speed, float, "CCSPlayer", "m_flMaxspeed");
  NETVAR(flags, int, "CCSPlayer", "m_fFlags");
  NETVAR(observer_mode, int, "CCSPlayer", "m_iObserverMode");
  NETVAR(observer_target, ehandle, "CCSPlayer", "m_hObserverTarget");
  NETVAR(view_model, ehandle, "CCSPlayer", "m_hViewModel[0]");
  NETVAR(last_place_name, const char*, "CCSPlayer", "m_szLastPlaceName");
  NETVAR(stamina, float, "CCSPlayer", "m_flStamina");
  NETVAR(direction, int, "CCSPlayer", "m_iDirection");
  NETVAR(shots_fired, int, "CCSPlayer", "m_iShotsFired");
  NETVAR(velocity_modifier, float, "CCSPlayer", "m_flVelocityModifier");
  NETVAR(player_dominated, void*, "CCSPlayer", "m_bPlayerDominated");
  NETVAR(player_dominating_me, void*, "CCSPlayer", "m_bPlayerDominatingMe");
  NETVAR(addon_bits, int, "CCSPlayer", "m_iAddonBits");
  NETVAR(primary_addon, int, "CCSPlayer", "m_iPrimaryAddon");
  NETVAR(secondary_addon, int, "CCSPlayer", "m_iSecondaryAddon");
  NETVAR(throw_grenade_counter, int, "CCSPlayer", "m_iThrowGrenadeCounter");
  NETVAR(player_state, int, "CCSPlayer", "m_iPlayerState");
  NETVAR(account, int, "CCSPlayer", "m_iAccount");
  NETVAR(in_bomb_zone, bool, "CCSPlayer", "m_bInBombZone");
  NETVAR(in_buy_zone, bool, "CCSPlayer", "m_bInBuyZone");
  NETVAR(player_class, int, "CCSPlayer", "m_iClass");
  NETVAR(armor_value, int, "CCSPlayer", "m_ArmorValue");
  NETVAR(eye_angles_x, float, "CCSPlayer", "m_angEyeAngles[0]");
  NETVAR(eye_angles_y, float, "CCSPlayer", "m_angEyeAngles[1]");
  NETVAR(has_defuser, bool, "CCSPlayer", "m_bHasDefuser");
  NETVAR(night_vision_on, bool, "CCSPlayer", "m_bNightVisionOn");
  NETVAR(has_night_vision, bool, "CCSPlayer", "m_bHasNightVision");
  NETVAR(in_hostage_rescue_zone, bool, "CCSPlayer", "m_bInHostageRescueZone");
  NETVAR(is_defusing, bool, "CCSPlayer", "m_bIsDefusing");
  NETVAR(resume_zoom, bool, "CCSPlayer", "m_bResumeZoom");
  NETVAR(last_zoom, int, "CCSPlayer", "m_iLastZoom");
  NETVAR(has_helmet, bool, "CCSPlayer", "m_bHasHelmet");
  NETVAR(ragdoll_velocity, vector3_t, "CCSPlayer", "m_vecRagdollVelocity");
  NETVAR(flash_duration, float, "CCSPlayer", "m_flFlashDuration");
  NETVAR(flash_max_alpha, float, "CCSPlayer", "m_flFlashMaxAlpha");
  NETVAR(progress_bar_duration, int, "CCSPlayer", "m_iProgressBarDuration");
  NETVAR(progress_bar_start_time, float, "CCSPlayer", "m_flProgressBarStartTime");
  NETVAR(ragdoll, ehandle, "CCSPlayer", "m_hRagdoll");
};